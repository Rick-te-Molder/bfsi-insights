---
import Base from '../layouts/Base.astro';
import resources from '../data/resources/resources.json';

const latest = resources
  .sort((a, b) => b.date_added.localeCompare(a.date_added))
  .slice(0, 6);

const isNew = (item) => (Date.now() - new Date(item.date_added)) / 86400000 <= 7;
const isUpdated = (item) => {
  if (!item.date_updated) return false;
  const d = (Date.now() - new Date(item.date_updated)) / 86400000;
  return d <= 7 && !isNew(item);
};
const fmt = (iso) => new Date(iso).toLocaleDateString('en-GB',{year:'numeric',month:'short',day:'numeric'});
const asArr = (v) => (Array.isArray(v) ? v : v ? [v] : []);
---
<Base title="BFSI Insights">
  <section class="mb-8 text-center">
    <h2 class="text-3xl font-bold tracking-tight">BFSI Insights</h2>
    <p class="mt-2 text-neutral-400">
      Agentic AI insights for banking, financial services, and insurance.
    </p>
  </section>

  <section>
    <h3 class="mb-4 text-xl font-semibold">Latest</h3>
    <ul class="grid gap-4 sm:grid-cols-2">
      {latest.map((item) => {
        const role = asArr(item.role);
        const industry = asArr(item.industry);
        const topic = asArr(item.topic);
        const use_cases = asArr(item.use_cases || item.usecases || item.usecase);
        const agentic = asArr(item.agentic_capabilities || item.agentic_capability);
        const content_type = asArr(item.content_type || item.type);
        const jurisdiction = asArr(item.jurisdiction || item.region);
        return (
          <li class="rounded-2xl border border-neutral-800 bg-neutral-900/60 p-4 shadow-sm transition hover:border-neutral-700">
            <a href={item.url} class="text-base font-medium text-sky-400 underline-offset-2 hover:underline focus:outline-none focus:ring-2 focus:ring-sky-500">
              {item.title}
            </a>
            {isNew(item) && (
              <span class="ml-2 align-middle rounded-full bg-emerald-400/10 px-2 py-0.5 text-xs font-semibold text-emerald-300 ring-1 ring-inset ring-emerald-400/30">New</span>
            )}
            {isUpdated(item) && (
              <span class="ml-2 align-middle rounded-full bg-amber-400/10 px-2 py-0.5 text-xs font-semibold text-amber-300 ring-1 ring-inset ring-amber-400/30">Updated</span>
            )}

            <div class="mt-1 text-sm text-neutral-400">
              <span>{fmt(item.date_added)}</span>
              {item.author && <span> · {item.author}</span>}
              {item.publisher && <span> · {item.publisher}</span>}
            </div>

            {item.note && <p class="mt-2 text-sm text-neutral-300">{item.note}</p>}

            <div class="mt-3 space-y-1">
              {[
                ['Role', role],
                ['Industry', industry],
                ['Topic', topic],
                ['Use cases', use_cases],
                ['Agentic', agentic],
                ['Content type', content_type],
                ['Jurisdiction', jurisdiction],
              ].map(([label, values]) =>
                values.length ? (
                  <div class="flex flex-wrap items-center gap-2">
                    <span class="text-xs text-neutral-400">{label}:</span>
                    {values.map((t) => (
                      <span class="rounded-md border border-neutral-700 px-2 py-0.5 text-xs text-neutral-200">{t}</span>
                    ))}
                  </div>
                ) : null
              )}
            </div>
          </li>
        );
      })}
    </ul>
  </section>
</Base>